name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        working-directory: test
        run: terraform init
      - name: Terraform Validate
        id: validate
        working-directory: test
        run: terraform validate -no-color
      - name: terraform-docs check
        uses: terraform-docs/gh-actions@v1.0.0
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: false
          fail-on-diff: true
      - name: Unit Tests (Terraform Plan)
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: test
        run: terraform plan -no-color
        continue-on-error: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Unit Test Status (Terraform Plan)
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - uses: actions/setup-go@v3
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          go-version-file: 'go.mod'
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Integration Tests (Terraform Apply & Destroy)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: test/integration
        env:
          GITHUB_TOKEN: ${{ secrets.ORGA_ADMIN_TOKEN }}
        run: go test -v -run .
      - uses: go-semantic-release/action@v1
        id: semrel
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          github-token: ${{ secrets.ORGA_USER_TOKEN }}
          allow-initial-development-versions: true
          changelog-generator-opt: "emojis=true"
